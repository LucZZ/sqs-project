name: SonarQube
on:
  push:
    branches:
      - main

env:
  Solution_Path: backend/UrlShortener.sln
  Architecture_Tests_Project_Path: backend/tests/UrlShortener.ArchitectureTests
  Unit_Tests_Project_Path: backend/tests/UrlShortener.UnitTests

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p .sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path .sonar/scanner

      - name: Install Coverlet Console Tool
        run: dotnet tool install --global coverlet.console

      - name: Restore dependencies
        run: dotnet restore ${{ env.Solution_Path }}

      - name: Run Architecture Tests
        run: dotnet test ${{ env.Architecture_Tests_Project_Path }} --no-restore

      - name: Start SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
        run: |
          .sonar/scanner/dotnet-sonarscanner begin \
            /k:"LucZZ_sqs-project" \
            /o:"luczz" \
            /d:sonar.token="${{ secrets.SONARQUBE_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.opencover.reportsPaths=coverage.xml

      - name: Build solution
        run: dotnet build ${{ env.Solution_Path }} --no-incremental --no-restore --property WarningLevel=0

      - name: Run unit tests with coverage
        run: |
          ~/.dotnet/tools/coverlet ${{ env.Unit_Tests_Project_Path }}/bin/Debug/net9.0/UrlShortener.UnitTests.dll \
            --target "dotnet" \
            --targetargs "test ${{ env.Unit_Tests_Project_Path }} --no-build" \
            -f opencover \
            -o "coverage.xml" \
            --property WarningLevel=0

      - name: Run integration tests with coverage
        run: echo "TODO"

      - name: Complete SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
        run: .sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONARQUBE_TOKEN }}"

