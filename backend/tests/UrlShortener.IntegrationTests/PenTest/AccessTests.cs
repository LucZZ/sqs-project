using Shouldly;
using System.Net;
using System.Net.Http.Headers;
using UrlShortener.Application.Authentication;
using UrlShortener.IntegrationTests.Abstractions;
using Xunit;

namespace UrlShortener.IntegrationTests.PenTest;
public class AccessTests : BaseIntegrationTest {

    private readonly CustomWebApplicationFactory _factory;

    public AccessTests(CustomWebApplicationFactory factory) : base(factory) {
        _factory = factory;
    }

    [Fact]
    public async Task AccessToSecuredEndpoints_ShouldSucceed_WhenTokenIsCorrect() {
        //Arrange
        var user = DataSeeder.Users[2];

        var request = new LoginRequest(user.UserName!, TestDataSeeder.Password);
        var tokenResponse = await Sender.Send(request);

        tokenResponse.IsSuccess.ShouldBeTrue();

        var client = _factory.CreateClient();

        var httpRequest = new HttpRequestMessage(HttpMethod.Get, "/api/auth/authorized");
        httpRequest.Headers.Authorization = new AuthenticationHeaderValue("Bearer", tokenResponse.Value!.AccessToken);
        //Act

        var response = await client.SendAsync(httpRequest);

        //Assert
        response.StatusCode.ShouldBe(HttpStatusCode.OK);
    }

    [Fact]
    public async Task AccessToSecuredEndpoints_ShouldFail_WhenTokenIsNotPresent() {
        //Arrange
        var client = _factory.CreateClient();

        var httpRequest = new HttpRequestMessage(HttpMethod.Get, "/api/auth/authorized");
        //Act

        var response = await client.SendAsync(httpRequest);

        //Assert
        response.StatusCode.ShouldBe(HttpStatusCode.Unauthorized);
    }

    [Fact]
    public async Task AccessToSecuredEndpoints_ShouldFail_WhenTokenIsInvalid() {
        //Arrange
        var client = _factory.CreateClient();

        var httpRequest = new HttpRequestMessage(HttpMethod.Get, "/api/auth/authorized");
        httpRequest.Headers.Authorization = new AuthenticationHeaderValue("Bearer", "that.is.no.valid.token");
        //Act

        var response = await client.SendAsync(httpRequest);

        //Assert
        response.StatusCode.ShouldBe(HttpStatusCode.Unauthorized);
    }
}
